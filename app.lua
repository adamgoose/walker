-- Generated by Haxe 4.2.1
local _hx_hidden = {__id__=true, hx__closures=true, super=true, prototype=true, __fields__=true, __ifields__=true, __class__=true, __properties__=true, __fields__=true, __name__=true}

_hx_array_mt = {
    __newindex = function(t,k,v)
        local len = t.length
        t.length =  k >= len and (k + 1) or len
        rawset(t,k,v)
    end
}

function _hx_is_array(o)
    return type(o) == "table"
        and o.__enum__ == nil
        and getmetatable(o) == _hx_array_mt
end



function _hx_tab_array(tab, length)
    tab.length = length
    return setmetatable(tab, _hx_array_mt)
end



function _hx_print_class(obj, depth)
    local first = true
    local result = ''
    for k,v in pairs(obj) do
        if _hx_hidden[k] == nil then
            if first then
                first = false
            else
                result = result .. ', '
            end
            if _hx_hidden[k] == nil then
                result = result .. k .. ':' .. _hx_tostring(v, depth+1)
            end
        end
    end
    return '{ ' .. result .. ' }'
end

function _hx_print_enum(o, depth)
    if o.length == 2 then
        return o[0]
    else
        local str = o[0] .. "("
        for i = 2, (o.length-1) do
            if i ~= 2 then
                str = str .. "," .. _hx_tostring(o[i], depth+1)
            else
                str = str .. _hx_tostring(o[i], depth+1)
            end
        end
        return str .. ")"
    end
end

function _hx_tostring(obj, depth)
    if depth == nil then
        depth = 0
    elseif depth > 5 then
        return "<...>"
    end

    local tstr = _G.type(obj)
    if tstr == "string" then return obj
    elseif tstr == "nil" then return "null"
    elseif tstr == "number" then
        if obj == _G.math.POSITIVE_INFINITY then return "Infinity"
        elseif obj == _G.math.NEGATIVE_INFINITY then return "-Infinity"
        elseif obj == 0 then return "0"
        elseif obj ~= obj then return "NaN"
        else return _G.tostring(obj)
        end
    elseif tstr == "boolean" then return _G.tostring(obj)
    elseif tstr == "userdata" then
        local mt = _G.getmetatable(obj)
        if mt ~= nil and mt.__tostring ~= nil then
            return _G.tostring(obj)
        else
            return "<userdata>"
        end
    elseif tstr == "function" then return "<function>"
    elseif tstr == "thread" then return "<thread>"
    elseif tstr == "table" then
        if obj.__enum__ ~= nil then
            return _hx_print_enum(obj, depth)
        elseif obj.toString ~= nil and not _hx_is_array(obj) then return obj:toString()
        elseif _hx_is_array(obj) then
            if obj.length > 5 then
                return "[...]"
            else
                local str = ""
                for i=0, (obj.length-1) do
                    if i == 0 then
                        str = str .. _hx_tostring(obj[i], depth+1)
                    else
                        str = str .. "," .. _hx_tostring(obj[i], depth+1)
                    end
                end
                return "[" .. str .. "]"
            end
        elseif obj.__class__ ~= nil then
            return _hx_print_class(obj, depth)
        else
            local buffer = {}
            local ref = obj
            if obj.__fields__ ~= nil then
                ref = obj.__fields__
            end
            for k,v in pairs(ref) do
                if _hx_hidden[k] == nil then
                    _G.table.insert(buffer, _hx_tostring(k, depth+1) .. ' : ' .. _hx_tostring(obj[k], depth+1))
                end
            end

            return "{ " .. table.concat(buffer, ", ") .. " }"
        end
    else
        _G.error("Unknown Lua type", 0)
        return ""
    end
end

function _hx_error(obj)
    if obj.value then
        _G.print("runtime error:\n " .. _hx_tostring(obj.value));
    else
        _G.print("runtime error:\n " .. tostring(obj));
    end

    if _G.debug and _G.debug.traceback then
        _G.print(debug.traceback());
    end
end


local function _hx_obj_newindex(t,k,v)
    t.__fields__[k] = true
    rawset(t,k,v)
end

local _hx_obj_mt = {__newindex=_hx_obj_newindex, __tostring=_hx_tostring}

local function _hx_a(...)
  local __fields__ = {};
  local ret = {__fields__ = __fields__};
  local max = select('#',...);
  local tab = {...};
  local cur = 1;
  while cur < max do
    local v = tab[cur];
    __fields__[v] = true;
    ret[v] = tab[cur+1];
    cur = cur + 2
  end
  return setmetatable(ret, _hx_obj_mt)
end

local function _hx_e()
  return setmetatable({__fields__ = {}}, _hx_obj_mt)
end

local function _hx_o(obj)
  return setmetatable(obj, _hx_obj_mt)
end

local function _hx_new(prototype)
  return setmetatable({__fields__ = {}}, {__newindex=_hx_obj_newindex, __index=prototype, __tostring=_hx_tostring})
end

function _hx_field_arr(obj)
    res = {}
    idx = 0
    if obj.__fields__ ~= nil then
        obj = obj.__fields__
    end
    for k,v in pairs(obj) do
        if _hx_hidden[k] == nil then
            res[idx] = k
            idx = idx + 1
        end
    end
    return _hx_tab_array(res, idx)
end

local _hxClasses = {}
local Int = _hx_e();
local Dynamic = _hx_e();
local Float = _hx_e();
local Bool = _hx_e();
local Class = _hx_e();
local Enum = _hx_e();

local Array = _hx_e()
__defold_support_Script = _hx_e()
local Beer = _hx_e()
local Controller = _hx_e()
local Date = _hx_e()
local Game = _hx_e()
local Lambda = _hx_e()
local Math = _hx_e()
local Messages = _hx_e()
local Player = _hx_e()
local Reflect = _hx_e()
local String = _hx_e()
local Std = _hx_e()
local StringBuf = _hx_e()
local StringTools = _hx_e()
local ValueType = _hx_e()
local Type = _hx_e()
__defold_GoMessages = _hx_e()
__defold_PhysicsMessages = _hx_e()
__defold_SpriteMessages = _hx_e()
__defold_SysMessages = _hx_e()
__defold_support_GuiScript = _hx_e()
__gui_LoginGUI = _hx_e()
__gui_GameGUI = _hx_e()
__defold_support_Init = _hx_e()
__haxe_IMap = _hx_e()
__haxe_Json = _hx_e()
__haxe_ds_ObjectMap = _hx_e()
__haxe_ds_StringMap = _hx_e()
__haxe_format_JsonPrinter = _hx_e()
__haxe_iterators_ArrayIterator = _hx_e()
__haxe_iterators_ArrayKeyValueIterator = _hx_e()
__lua_Boot = _hx_e()
__lua_UserData = _hx_e()
__lua_PairTools = _hx_e()
__lua_Thread = _hx_e()

local _hx_bind, _hx_bit, _hx_staticToInstance, _hx_funcToField, _hx_maxn, _hx_print, _hx_apply_self, _hx_box_mr, _hx_bit_clamp, _hx_table, _hx_bit_raw
local _hx_pcall_default = {};
local _hx_pcall_break = {};

Array.new = function() 
  local self = _hx_new(Array.prototype)
  Array.super(self)
  return self
end
Array.super = function(self) 
  _hx_tab_array(self, 0);
end
Array.__name__ = true
Array.prototype = _hx_e();
Array.prototype.length= nil;
Array.prototype.concat = function(self,a) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < self.length) do 
    local i = self[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  local _g1 = 0;
  while (_g1 < a.length) do 
    local i = a[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  do return _g end
end
Array.prototype.join = function(self,sep) 
  local tbl = ({});
  local _g_current = 0;
  while (_g_current < self.length) do 
    _g_current = _g_current + 1;
    _G.table.insert(tbl, Std.string(self[_g_current - 1]));
  end;
  do return _G.table.concat(tbl, sep) end
end
Array.prototype.pop = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[self.length - 1];
  self[self.length - 1] = nil;
  self.length = self.length - 1;
  do return ret end
end
Array.prototype.push = function(self,x) 
  self[self.length] = x;
  do return self.length end
end
Array.prototype.reverse = function(self) 
  local tmp;
  local i = 0;
  while (i < Std.int(self.length / 2)) do 
    tmp = self[i];
    self[i] = self[(self.length - i) - 1];
    self[(self.length - i) - 1] = tmp;
    i = i + 1;
  end;
end
Array.prototype.shift = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[0];
  if (self.length == 1) then 
    self[0] = nil;
  else
    if (self.length > 1) then 
      self[0] = self[1];
      _G.table.remove(self, 1);
    end;
  end;
  local tmp = self;
  tmp.length = tmp.length - 1;
  do return ret end
end
Array.prototype.slice = function(self,pos,_end) 
  if ((_end == nil) or (_end > self.length)) then 
    _end = self.length;
  else
    if (_end < 0) then 
      _end = _G.math.fmod((self.length - (_G.math.fmod(-_end, self.length))), self.length);
    end;
  end;
  if (pos < 0) then 
    pos = _G.math.fmod((self.length - (_G.math.fmod(-pos, self.length))), self.length);
  end;
  if ((pos > _end) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  end;
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = _end;
  while (_g < _g1) do 
    _g = _g + 1;
    ret:push(self[_g - 1]);
  end;
  do return ret end
end
Array.prototype.sort = function(self,f) 
  local i = 0;
  local l = self.length;
  while (i < l) do 
    local swap = false;
    local j = 0;
    local max = (l - i) - 1;
    while (j < max) do 
      if (f(self[j], self[j + 1]) > 0) then 
        local tmp = self[j + 1];
        self[j + 1] = self[j];
        self[j] = tmp;
        swap = true;
      end;
      j = j + 1;
    end;
    if (not swap) then 
      break;
    end;
    i = i + 1;
  end;
end
Array.prototype.splice = function(self,pos,len) 
  if ((len < 0) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  else
    if (pos < 0) then 
      pos = self.length - (_G.math.fmod(-pos, self.length));
    end;
  end;
  len = Math.min(len, self.length - pos);
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = pos + len;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
    self[i] = self[i + len];
  end;
  local _g = pos + len;
  local _g1 = self.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    self[i] = self[i + len];
  end;
  self.length = self.length - len;
  do return ret end
end
Array.prototype.toString = function(self) 
  local tbl = ({});
  _G.table.insert(tbl, "[");
  _G.table.insert(tbl, self:join(","));
  _G.table.insert(tbl, "]");
  do return _G.table.concat(tbl, "") end
end
Array.prototype.unshift = function(self,x) 
  local len = self.length;
  local _g = 0;
  while (_g < len) do 
    _g = _g + 1;
    local i = _g - 1;
    self[len - i] = self[(len - i) - 1];
  end;
  self[0] = x;
end
Array.prototype.insert = function(self,pos,x) 
  if (pos > self.length) then 
    pos = self.length;
  end;
  if (pos < 0) then 
    pos = self.length + pos;
    if (pos < 0) then 
      pos = 0;
    end;
  end;
  local cur_len = self.length;
  while (cur_len > pos) do 
    self[cur_len] = self[cur_len - 1];
    cur_len = cur_len - 1;
  end;
  self[pos] = x;
end
Array.prototype.remove = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    if (self[i] == x) then 
      local _g = i;
      local _g1 = self.length - 1;
      while (_g < _g1) do 
        _g = _g + 1;
        local j = _g - 1;
        self[j] = self[j + 1];
      end;
      self[self.length - 1] = nil;
      self.length = self.length - 1;
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.contains = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do 
    _g = _g + 1;
    if (self[_g - 1] == x) then 
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.indexOf = function(self,x,fromIndex) 
  local _end = self.length;
  if (fromIndex == nil) then 
    fromIndex = 0;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        fromIndex = 0;
      end;
    end;
  end;
  local _g = fromIndex;
  while (_g < _end) do 
    _g = _g + 1;
    local i = _g - 1;
    if (x == self[i]) then 
      do return i end;
    end;
  end;
  do return -1 end
end
Array.prototype.lastIndexOf = function(self,x,fromIndex) 
  if ((fromIndex == nil) or (fromIndex >= self.length)) then 
    fromIndex = self.length - 1;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        do return -1 end;
      end;
    end;
  end;
  local i = fromIndex;
  while (i >= 0) do 
    if (self[i] == x) then 
      do return i end;
    else
      i = i - 1;
    end;
  end;
  do return -1 end
end
Array.prototype.copy = function(self) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < self.length) do 
    local i = self[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  do return _g end
end
Array.prototype.map = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < self.length) do 
    local i = self[_g1];
    _g1 = _g1 + 1;
    _g:push(f(i));
  end;
  do return _g end
end
Array.prototype.filter = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  while (_g1 < self.length) do 
    local i = self[_g1];
    _g1 = _g1 + 1;
    if (f(i)) then 
      _g:push(i);
    end;
  end;
  do return _g end
end
Array.prototype.iterator = function(self) 
  do return __haxe_iterators_ArrayIterator.new(self) end
end
Array.prototype.keyValueIterator = function(self) 
  do return __haxe_iterators_ArrayKeyValueIterator.new(self) end
end
Array.prototype.resize = function(self,len) 
  if (self.length < len) then 
    self.length = len;
  else
    if (self.length > len) then 
      local _g = len;
      local _g1 = self.length;
      while (_g < _g1) do 
        _g = _g + 1;
        self[_g - 1] = nil;
      end;
      self.length = len;
    end;
  end;
end

Array.prototype.__class__ =  Array

__defold_support_Script.new = function() 
  local self = _hx_new(__defold_support_Script.prototype)
  __defold_support_Script.super(self)
  return self
end
__defold_support_Script.super = function(self) 
end
__defold_support_Script.__name__ = true
__defold_support_Script.prototype = _hx_e();

__defold_support_Script.prototype.__class__ =  __defold_support_Script

Beer.new = function() 
  local self = _hx_new(Beer.prototype)
  Beer.super(self)
  return self
end
Beer.super = function(self) 
  __defold_support_Script.super(self);
end
Beer.__name__ = true
Beer.prototype = _hx_e();
Beer.prototype.on_message = function(self,_self,message_id,message,sender) 
  if (message_id) == Beer.Nuke then 
    _G.go.delete(".");
  elseif (message_id) == Beer.SetId then 
    _self.id = _hx_funcToField(message.id);
  elseif (message_id) == __defold_PhysicsMessages.collision_response then 
    if (_G.go.get(_G.msg.url(nil, message.other_id, _G.hash("player")), "controlled")) then 
      _G.msg.post("/game", Beer.BeerClaimed, _hx_o({__fields__={id=true},id=_self.id}));
    end; end;
end

Beer.prototype.__class__ =  Beer
Beer.__super__ = __defold_support_Script
setmetatable(Beer.prototype,{__index=__defold_support_Script.prototype})

Controller.new = function() 
  local self = _hx_new(Controller.prototype)
  Controller.super(self)
  return self
end
Controller.super = function(self) 
  __defold_support_Script.super(self);
end
Controller.__name__ = true
Controller.prototype = _hx_e();
Controller.prototype.init = function(self,_self) 
  local _gthis = self;
  _self.client = nakama.create_client(_hx_o({__fields__={host=true,port=true,use_ssl=true,username=true,password=true,engine=true},host="nakama.enge.me",port=443,use_ssl=true,username="defaultkey",password="",engine=defold}));
  _self.socket = nakama.create_socket(_self.client);
  _G.math.randomseed(_G.os.time() * 1000);
  local tmp = _G.math.random(5);
  _self.skin = Std.int(tmp);
  _G.msg.post("/mainMenu#sprite", __defold_SpriteMessages.play_animation, _hx_o({__fields__={id=true},id=_G.hash(Std.string(Std.string("") .. Std.string(_self.skin)) .. Std.string("_walk_sw"))}));
  _G.msg.post("/game", __defold_GoMessages.disable);
  nakama.on_matchdata(_self.socket, function(message) 
    _G.msg.post("/game", Messages.OnMatchdata, message.match_data);
  end);
  nakama.on_matchpresence(_self.socket, function(message) 
    _G.msg.post("/game", Messages.OnMatchpresence, message.match_presence_event);
  end);
  nakama.on_matchmakermatched(_self.socket, function(message) 
    _gthis:onMatchmakermatched(_self, message.matchmaker_matched);
  end);
end
Controller.prototype.on_message = function(self,_self,message_id,message,sender) 
  local _gthis = self;
  if (message_id) == Messages.IncrementSkin then 
    local tmp = (function() 
    local _hx_obj = _self;
    local _hx_fld = 'skin';
    _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
     return _hx_obj[_hx_fld];
     end)() > 5;
    if (tmp) then 
      _self.skin = 1;
    end;
    _G.msg.post("/mainMenu#sprite", __defold_SpriteMessages.play_animation, _hx_o({__fields__={id=true},id=_G.hash(Std.string(Std.string("") .. Std.string(_self.skin)) .. Std.string("_walk_sw"))}));
  elseif (message_id) == Messages.Login then 
    nakama.sync(function() 
      _gthis:handleLogin(_self, message);
    end);
  elseif (message_id) == Messages.SendMatchState then 
    nakama.sync(function() 
      local data = __haxe_Json.stringify(message.data, function(key,value) 
        if (key == "position") then 
          do return _hx_o({__fields__={x=true,y=true,z=true},x=value.x,y=value.y,z=value.z}) end;
        end;
        do return value end;
      end);
      local req = nakama.create_match_data_message(message.match_id, message.op_code, data);
      nakama.socket_send(_self.socket, req);
    end);
  elseif (message_id) == Messages.SocketSend then 
    nakama.sync(function() 
      nakama.socket_send(_self.socket, message);
    end); end;
end
Controller.prototype.handleLogin = function(self,_self,cmd) 
  local req = nakama.create_api_account_device(defold.uuid());
  local resp = nakama.authenticate_device(_self.client, req, true);
  if (resp.error) then 
    _G.msg.post("/gameGui", Messages.SetText, _hx_o({__fields__={text=true},text=resp.message}));
    do return end;
  end;
  _self.username = _hx_funcToField(cmd.username);
  nakama.set_bearer_token(_self.client, resp.token);
  local ok = _hx_box_mr(_hx_table.pack(nakama.socket_connect(_self.socket)), {"ok", "err"});
  if (not ok.ok) then 
    _G.pprint(ok);
  end;
  _G.msg.post("/mainMenu", __defold_GoMessages.disable);
  _G.msg.post("/gameGui", Messages.Connected);
  _self.toy = self:spawnToy(_self);
  _self.ticket = self:beginMatchmaking(_self);
end
Controller.prototype.beginMatchmaking = function(self,_self) 
  _G.msg.post("/gameGui", Messages.SetText, _hx_o({__fields__={text=true},text="Looking for friends..."}));
  local sProps = ({});
  sProps.username = _self.username;
  local nProps = ({});
  nProps.skin = _self.skin / 1;
  local req = nakama.create_matchmaker_add_message("*", 2, 10, sProps, nProps);
  do return nakama.socket_send(_self.socket, req).matchmaker_ticket.ticket end
end
Controller.prototype.spawnToy = function(self,_self) 
  local p = ({});
  p.skin = _self.skin;
  local toy = _G.factory.create("#playerFactory", nil, nil, p);
  _G.msg.post(toy, Messages.EnableControl);
  _G.msg.post(toy, Messages.SetText, _hx_o({__fields__={text=true},text=_self.username}));
  do return toy end
end
Controller.prototype.onMatchmakermatched = function(self,_self,message) 
  if (message.ticket ~= _self.ticket) then 
    do return end;
  end;
  _self.ticket = nil;
  _G.msg.post("/gameGui", Messages.SetText, _hx_o({__fields__={text=true},text="Connecting to friends!"}));
  nakama.sync(function() 
    local req = nakama.create_match_join_message(message.match_id, message.token);
    local match = nakama.socket_send(_self.socket, req);
    match.skin = _hx_funcToField(_self.skin);
    match.users = _hx_funcToField(message.users);
    _G.go.delete(_self.toy);
    _G.msg.post("/game", Messages.JoinMatch, match);
  end);
end

Controller.prototype.__class__ =  Controller
Controller.__super__ = __defold_support_Script
setmetatable(Controller.prototype,{__index=__defold_support_Script.prototype})

Date.new = function(year,month,day,hour,min,sec) 
  local self = _hx_new(Date.prototype)
  Date.super(self,year,month,day,hour,min,sec)
  return self
end
Date.super = function(self,year,month,day,hour,min,sec) 
  self.t = _G.os.time(_hx_o({__fields__={year=true,month=true,day=true,hour=true,min=true,sec=true},year=year,month=month + 1,day=day,hour=hour,min=min,sec=sec}));
  self.d = _G.os.date("*t", self.t);
  self.dUTC = _G.os.date("!*t", self.t);
end
Date.__name__ = true
Date.prototype = _hx_e();
Date.prototype.d= nil;
Date.prototype.dUTC= nil;
Date.prototype.t= nil;
Date.prototype.getHours = function(self) 
  do return self.d.hour end
end
Date.prototype.getMinutes = function(self) 
  do return self.d.min end
end
Date.prototype.getSeconds = function(self) 
  do return self.d.sec end
end
Date.prototype.getFullYear = function(self) 
  do return self.d.year end
end
Date.prototype.getMonth = function(self) 
  do return self.d.month - 1 end
end
Date.prototype.getDate = function(self) 
  do return self.d.day end
end

Date.prototype.__class__ =  Date

Game.new = function() 
  local self = _hx_new(Game.prototype)
  Game.super(self)
  return self
end
Game.super = function(self) 
  __defold_support_Script.super(self);
end
Game.__name__ = true
Game.prototype = _hx_e();
Game.prototype.init = function(self,_self) 
  _self.users = __haxe_ds_StringMap.new();
  _self.playerObjs = __haxe_ds_StringMap.new();
  _self.beerObjs = __haxe_ds_StringMap.new();
end
Game.prototype.spawnBeer = function(self,_self,beer) 
  local p = _G.vmath.vector3(beer.position.x, beer.position.y, beer.position.z);
  local this1 = _self.beerObjs;
  local k = beer.id;
  local v = _G.factory.create("#beerFactory", p, nil, nil, 0.75);
  local _this = this1;
  if (v == nil) then 
    _this.h[k] = __haxe_ds_StringMap.tnull;
  else
    _this.h[k] = v;
  end;
  _G.msg.post(v, Beer.SetId, _hx_o({__fields__={id=true},id=beer.id}));
end
Game.prototype.on_message = function(self,_self,message_id,message,sender) 
  if (message_id) == Beer.BeerClaimed then 
    local ret = _self.beerObjs.h[message.id];
    if (ret == __haxe_ds_StringMap.tnull) then 
      ret = nil;
    end;
    if (ret ~= nil) then 
      local ret = _self.beerObjs.h[message.id];
      if (ret == __haxe_ds_StringMap.tnull) then 
        ret = nil;
      end;
      _G.msg.post(ret, Beer.Nuke);
      _self.beerObjs:remove(message.id);
    end;
    _G.msg.post("/controller", Messages.SendMatchState, _hx_o({__fields__={match_id=true,op_code=true,data=true},match_id=_self.match.match_id,op_code=3,data=message}));
  elseif (message_id) == Messages.JoinMatch then 
    _self.match = _hx_funcToField(message.match);
    local u = __lua_PairTools.ipairsIterator(message.users);
    while (u:hasNext()) do 
      local u = u:next();
      local k = u.value.presence.session_id;
      local v = u.value;
      local _this = _self.users;
      if (v == nil) then 
        _this.h[k] = __haxe_ds_StringMap.tnull;
      else
        _this.h[k] = v;
      end;
    end;
    _G.msg.post("/gameGui", Messages.SetText, _hx_o({__fields__={text=true},text="Friends!"}));
    self:spawnSelf(_self, message.skin);
    local player = __lua_PairTools.ipairsIterator(_self.match.presences);
    while (player:hasNext()) do 
      self:spawnPlayer(_self, player:next().value);
    end;
  elseif (message_id) == Messages.Move then 
    _G.msg.post("/controller", Messages.SendMatchState, _hx_o({__fields__={match_id=true,op_code=true,data=true},match_id=_self.match.match_id,op_code=1,data=message}));
  elseif (message_id) == Messages.OnMatchdata then 
    local _g = message.op_code;
    if (_g) == "1" then 
      self:positionPlayer(_self, message.presence, json.decode(message.data));
    elseif (_g) == "2" then 
      self:spawnBeer(_self, json.decode(message.data));
    elseif (_g) == "3" then 
      local beer = json.decode(message.data);
      local ret = _self.beerObjs.h[beer.id];
      if (ret == __haxe_ds_StringMap.tnull) then 
        ret = nil;
      end;
      if (ret ~= nil) then 
        local ret = _self.beerObjs.h[beer.id];
        if (ret == __haxe_ds_StringMap.tnull) then 
          ret = nil;
        end;
        _G.go.delete(ret);
        _self.beerObjs:remove(beer.id);
      end;
    elseif (_g) == "4" then 
      _self.scores = json.decode(message.data);
      _G.msg.post("/gameGui", __gui_GameGUI.SetScoreboard, _self.scores); end;
  elseif (message_id) == Messages.OnMatchpresence then 
    if (message.joins ~= nil) then 
      local player = __lua_PairTools.ipairsIterator(message.joins);
      while (player:hasNext()) do 
        self:spawnPlayer(_self, player:next().value);
      end;
    end;
    if (message.leaves ~= nil) then 
      local player = __lua_PairTools.ipairsIterator(message.leaves);
      while (player:hasNext()) do 
        self:despawnPlayer(_self, player:next().value);
      end;
    end; end;
end
Game.prototype.spawnSelf = function(self,_self,skin) 
  local p = ({});
  p.skin = skin;
  local player = _G.factory.create("#playerFactory", nil, nil, p);
  _G.msg.post(player, Messages.EnableControl);
  _G.msg.post(player, Messages.ReportPlayerPosition);
  local ret = _self.users.h[_self.match["self"].session_id];
  if (ret == __haxe_ds_StringMap.tnull) then 
    ret = nil;
  end;
  local obj = __haxe_ds_ObjectMap.new();
  __lua_PairTools.pairsFold(ret.string_properties, function(k,v,m) 
    obj.h[k] = v;
    obj.k[k] = true;
    do return obj end;
  end, obj);
  local ret = obj.h.username;
  if (ret == __haxe_ds_StringMap.tnull) then 
    ret = nil;
  end;
  _G.msg.post(player, Messages.SetText, _hx_o({__fields__={text=true},text=ret}));
  _self.playerObj = player do return _self.playerObj end
end
Game.prototype.spawnPlayer = function(self,_self,presence) 
  if ((_self.playerObjs.h[presence.session_id] ~= nil) or ((_self.match ~= nil) and (presence.session_id == _self.match["self"].session_id))) then 
    do return nil end;
  end;
  local ret = _self.users.h[presence.session_id];
  if (ret == __haxe_ds_StringMap.tnull) then 
    ret = nil;
  end;
  local u = ret;
  local p = ({});
  local obj = __haxe_ds_ObjectMap.new();
  __lua_PairTools.pairsFold(u.numeric_properties, function(k,v,m) 
    obj.h[k] = v;
    obj.k[k] = true;
    do return obj end;
  end, obj);
  local ret = obj.h.skin;
  if (ret == __haxe_ds_StringMap.tnull) then 
    ret = nil;
  end;
  p.skin = ret;
  local player = _G.factory.create("#playerFactory", nil, nil, p);
  local obj = __haxe_ds_ObjectMap.new();
  __lua_PairTools.pairsFold(u.string_properties, function(k,v,m) 
    obj.h[k] = v;
    obj.k[k] = true;
    do return obj end;
  end, obj);
  local ret = obj.h.username;
  if (ret == __haxe_ds_StringMap.tnull) then 
    ret = nil;
  end;
  _G.msg.post(player, Messages.SetText, _hx_o({__fields__={text=true},text=ret}));
  local k = presence.session_id;
  local _this = _self.playerObjs;
  if (player == nil) then 
    _this.h[k] = __haxe_ds_StringMap.tnull;
  else
    _this.h[k] = player;
  end;
  do return player end
end
Game.prototype.positionPlayer = function(self,_self,presence,move) 
  local ret = _self.playerObjs.h[presence.session_id];
  if (ret == __haxe_ds_StringMap.tnull) then 
    ret = nil;
  end;
  local p = ret;
  if (p ~= nil) then 
    _G.msg.post(p, Messages.Move, move);
  end;
end
Game.prototype.despawnPlayer = function(self,_self,presence) 
  local ret = _self.playerObjs.h[presence.session_id];
  if (ret == __haxe_ds_StringMap.tnull) then 
    ret = nil;
  end;
  _G.go.delete(ret);
  _self.playerObjs:remove(presence.session_id);
end

Game.prototype.__class__ =  Game
Game.__super__ = __defold_support_Script
setmetatable(Game.prototype,{__index=__defold_support_Script.prototype})

Lambda.new = {}
Lambda.__name__ = true
Lambda.has = function(it,elt) 
  local x = it:iterator();
  while (x:hasNext()) do 
    if (x:next() == elt) then 
      do return true end;
    end;
  end;
  do return false end;
end

Math.new = {}
Math.__name__ = true
Math.isNaN = function(f) 
  do return f ~= f end;
end
Math.isFinite = function(f) 
  if (f > -_G.math.huge) then 
    do return f < _G.math.huge end;
  else
    do return false end;
  end;
end
Math.max = function(a,b) 
  if (Math.isNaN(a) or Math.isNaN(b)) then 
    do return (0/0) end;
  else
    do return _G.math.max(a, b) end;
  end;
end
Math.min = function(a,b) 
  if (Math.isNaN(a) or Math.isNaN(b)) then 
    do return (0/0) end;
  else
    do return _G.math.min(a, b) end;
  end;
end

Messages.new = {}
Messages.__name__ = true

Player.new = function() 
  local self = _hx_new(Player.prototype)
  Player.super(self)
  return self
end
Player.super = function(self) 
  self.maxY = 720;
  self.maxX = 1280;
  self.sprintSpeed = 300;
  self.walkSpeed = 150;
  __defold_support_Script.super(self);
end
Player.__name__ = true
Player.prototype = _hx_e();
Player.prototype.walkSpeed= nil;
Player.prototype.sprintSpeed= nil;
Player.prototype.maxX= nil;
Player.prototype.maxY= nil;
Player.prototype.init = function(self,_self) 
  _self.state = "idle";
  _self.dirY = "s";
  _self.dirX = "";
  _self.speed = _G.vmath.vector3();
end
Player.prototype.update = function(self,_self,dt) 
  if ((_self.animation == nil) and (_self.skin ~= 0)) then 
    _self.animation = Std.string(Std.string("") .. Std.string(_self.skin)) .. Std.string("_idle_s");
    _G.msg.post("#sprite", __defold_SpriteMessages.play_animation, _hx_o({__fields__={id=true},id=_G.hash(_self.animation)}));
  end;
  if (not _self.controlled) then 
    do return end;
  end;
  local oldState = _self.state;
  local oldDirX = _self.dirX;
  local oldDirY = _self.dirY;
  self:updatePosition(_self, dt);
  self:updateVisuals(_self);
  self:reportPosition(_self);
  if (((_self.dirX ~= oldDirX) or (_self.dirY ~= oldDirY)) or (_self.state ~= oldState)) then 
    _G.msg.post("#sprite", __defold_SpriteMessages.play_animation, _hx_o({__fields__={id=true},id=_G.hash(_self.animation)}));
  end;
  _self.speed = _G.vmath.vector3();
end
Player.prototype.on_input = function(self,_self,action_id,action) 
  if (action_id == _G.hash("sprint")) then 
    _self.sprinting = not action.released;
  else
    local speed = (function() 
      local _hx_1
      if (_self.sprinting) then 
      _hx_1 = self.sprintSpeed; else 
      _hx_1 = self.walkSpeed; end
      return _hx_1
    end )();
    if (action_id == _G.hash("n")) then 
      local fh = _self.speed;
      fh.y = fh.y + speed;
    else
      if (action_id == _G.hash("s")) then 
        local fh = _self.speed;
        fh.y = fh.y - speed;
      else
        if (action_id == _G.hash("e")) then 
          local fh = _self.speed;
          fh.x = fh.x + speed;
        else
          if (action_id == _G.hash("w")) then 
            local fh = _self.speed;
            fh.x = fh.x - speed;
          end;
        end;
      end;
    end;
  end;
  do return true end
end
Player.prototype.on_message = function(self,_self,message_id,message,sender) 
  if (message_id) == Messages.EnableControl then 
    _G.go.set("#player", "controlled", true);
    _G.msg.post(".", __defold_GoMessages.acquire_input_focus);
  elseif (message_id) == Messages.Move then 
    self:move(_self, message.skin, message.animation, message.position);
  elseif (message_id) == Messages.ReportPlayerPosition then 
    _self.reportPlayerPosition = true;
  elseif (message_id) == Messages.SetText then 
    _G.label.set_text("#email", message.text);
  elseif (message_id) == __defold_PhysicsMessages.collision_response then  end;
end
Player.prototype.updatePosition = function(self,_self,dt) 
  local p = _G.go.get_position();
  p.y = Math.max(0, Math.min(self.maxY, p.y));
  p.x = Math.max(0, Math.min(self.maxX, p.x));
  local a = _self.speed;
  local b = (a) * (dt);
  p = (p) + (b);
  _G.go.set_position(p);
end
Player.prototype.reportPosition = function(self,_self) 
  if (_self.reportPlayerPosition) then 
    _G.msg.post("/game", Messages.Move, _hx_o({__fields__={skin=true,animation=true,position=true},skin=_self.skin,animation=_self.animation,position=_G.go.get_position()}));
  end;
end
Player.prototype.updateVisuals = function(self,_self) 
  _self.state = (function() 
    local _hx_1
    if (_self.speed == _G.vmath.vector3()) then 
    _hx_1 = "idle"; else 
    _hx_1 = "walk"; end
    return _hx_1
  end )();
  local _g = _self.speed.x;
  local _hx_tmp;
  local _hx_tmp1;
  if ((_g > 0) == true) then 
    _self.dirX = "e";
  else
    _hx_tmp1 = _g < 0;
    if (_hx_tmp1 == true) then 
      _self.dirX = "w";
    else
      _hx_tmp = _self.speed ~= _G.vmath.vector3();
      if (_hx_tmp == true) then 
        _self.dirX = "";
      end;
    end;
  end;
  local _g = _self.speed.y;
  local _hx_tmp;
  local _hx_tmp1;
  if ((_g > 0) == true) then 
    _self.dirY = "n";
  else
    _hx_tmp1 = _g < 0;
    if (_hx_tmp1 == true) then 
      _self.dirY = "s";
    else
      _hx_tmp = _self.speed ~= _G.vmath.vector3();
      if (_hx_tmp == true) then 
        _self.dirY = "";
      end;
    end;
  end;
  _self.animation = Std.string(Std.string(Std.string(Std.string(Std.string(Std.string("") .. Std.string(_self.skin)) .. Std.string("_")) .. Std.string(_self.state)) .. Std.string("_")) .. Std.string(_self.dirY)) .. Std.string(_self.dirX);
end
Player.prototype.move = function(self,_self,skin,animation,position) 
  _self.skin = skin;
  _G.go.set_position(_G.vmath.vector3(position.x, position.y, position.z));
  if (animation ~= _self.animation) then 
    _self.animation = animation;
    _G.msg.post("#sprite", __defold_SpriteMessages.play_animation, _hx_o({__fields__={id=true},id=_G.hash(_self.animation)}));
  end;
end

Player.prototype.__class__ =  Player
Player.__super__ = __defold_support_Script
setmetatable(Player.prototype,{__index=__defold_support_Script.prototype})

Reflect.new = {}
Reflect.__name__ = true
Reflect.field = function(o,field) 
  if (_G.type(o) == "string") then 
    if (field == "length") then 
      do return _hx_wrap_if_string_field(o,'length') end;
    else
      do return String.prototype[field] end;
    end;
  else
    local _hx_status, _hx_result = pcall(function() 
    
        do return o[field] end;
      return _hx_pcall_default
    end)
    if not _hx_status and _hx_result == "_hx_pcall_break" then
    elseif not _hx_status then 
      local _g = _hx_result;
      do return nil end;
    elseif _hx_result ~= _hx_pcall_default then
      return _hx_result
    end;
  end;
end
Reflect.fields = function(o) 
  local _hx_continue_1 = false;
  while (true) do repeat 
    if (_G.type(o) == "string") then 
      o = String.prototype;
      break;
    else
      do return _hx_field_arr(o) end;
    end;until true
    if _hx_continue_1 then 
    _hx_continue_1 = false;
    break;
    end;
    
  end;
end
Reflect.isFunction = function(f) 
  if (_G.type(f) == "function") then 
    do return not ((function() 
      local _hx_1
      if (_G.type(f) ~= "table") then 
      _hx_1 = false; else 
      _hx_1 = f.__name__; end
      return _hx_1
    end )() or (function() 
      local _hx_2
      if (_G.type(f) ~= "table") then 
      _hx_2 = false; else 
      _hx_2 = f.__ename__; end
      return _hx_2
    end )()) end;
  else
    do return false end;
  end;
end

String.new = function(string) 
  local self = _hx_new(String.prototype)
  String.super(self,string)
  self = string
  return self
end
String.super = function(self,string) 
end
String.__name__ = true
String.__index = function(s,k) 
  if (k == "length") then 
    do return _G.string.len(s) end;
  else
    local o = String.prototype;
    local field = k;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "string") and ((String.prototype[field] ~= nil) or (field == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[field] ~= nil; else 
      _hx_1 = o[field] ~= nil; end
      return _hx_1
    end )()) then 
      do return String.prototype[k] end;
    else
      if (String.__oldindex ~= nil) then 
        if (_G.type(String.__oldindex) == "function") then 
          do return String.__oldindex(s, k) end;
        else
          if (_G.type(String.__oldindex) == "table") then 
            do return String.__oldindex[k] end;
          end;
        end;
        do return nil end;
      else
        do return nil end;
      end;
    end;
  end;
end
String.indexOfEmpty = function(s,startIndex) 
  local length = _G.string.len(s);
  if (startIndex < 0) then 
    startIndex = length + startIndex;
    if (startIndex < 0) then 
      startIndex = 0;
    end;
  end;
  if (startIndex > length) then 
    do return length end;
  else
    do return startIndex end;
  end;
end
String.fromCharCode = function(code) 
  do return _G.string.char(code) end;
end
String.prototype = _hx_e();
String.prototype.length= nil;
String.prototype.toUpperCase = function(self) 
  do return _G.string.upper(self) end
end
String.prototype.toLowerCase = function(self) 
  do return _G.string.lower(self) end
end
String.prototype.indexOf = function(self,str,startIndex) 
  if (startIndex == nil) then 
    startIndex = 1;
  else
    startIndex = startIndex + 1;
  end;
  if (str == "") then 
    do return String.indexOfEmpty(self, startIndex - 1) end;
  end;
  local r = _G.string.find(self, str, startIndex, true);
  if ((r ~= nil) and (r > 0)) then 
    do return r - 1 end;
  else
    do return -1 end;
  end;
end
String.prototype.lastIndexOf = function(self,str,startIndex) 
  local ret = -1;
  if (startIndex == nil) then 
    startIndex = #self;
  end;
  while (true) do 
    local startIndex1 = ret + 1;
    if (startIndex1 == nil) then 
      startIndex1 = 1;
    else
      startIndex1 = startIndex1 + 1;
    end;
    local p;
    if (str == "") then 
      p = String.indexOfEmpty(self, startIndex1 - 1);
    else
      local r = _G.string.find(self, str, startIndex1, true);
      p = (function() 
        local _hx_1
        if ((r ~= nil) and (r > 0)) then 
        _hx_1 = r - 1; else 
        _hx_1 = -1; end
        return _hx_1
      end )();
    end;
    if (((p == -1) or (p > startIndex)) or (p == ret)) then 
      break;
    end;
    ret = p;
  end;
  do return ret end
end
String.prototype.split = function(self,delimiter) 
  local idx = 1;
  local ret = _hx_tab_array({}, 0);
  while (idx ~= nil) do 
    local newidx = 0;
    if (#delimiter > 0) then 
      newidx = _G.string.find(self, delimiter, idx, true);
    else
      if (idx >= #self) then 
        newidx = nil;
      else
        newidx = idx + 1;
      end;
    end;
    if (newidx ~= nil) then 
      ret:push(_G.string.sub(self, idx, newidx - 1));
      idx = newidx + #delimiter;
    else
      ret:push(_G.string.sub(self, idx, #self));
      idx = nil;
    end;
  end;
  do return ret end
end
String.prototype.toString = function(self) 
  do return self end
end
String.prototype.substring = function(self,startIndex,endIndex) 
  if (endIndex == nil) then 
    endIndex = #self;
  end;
  if (endIndex < 0) then 
    endIndex = 0;
  end;
  if (startIndex < 0) then 
    startIndex = 0;
  end;
  if (endIndex < startIndex) then 
    do return _G.string.sub(self, endIndex + 1, startIndex) end;
  else
    do return _G.string.sub(self, startIndex + 1, endIndex) end;
  end;
end
String.prototype.charAt = function(self,index) 
  do return _G.string.sub(self, index + 1, index + 1) end
end
String.prototype.charCodeAt = function(self,index) 
  do return _G.string.byte(self, index + 1) end
end
String.prototype.substr = function(self,pos,len) 
  if ((len == nil) or (len > (pos + #self))) then 
    len = #self;
  else
    if (len < 0) then 
      len = #self + len;
    end;
  end;
  if (pos < 0) then 
    pos = #self + pos;
  end;
  if (pos < 0) then 
    pos = 0;
  end;
  do return _G.string.sub(self, pos + 1, pos + len) end
end

String.prototype.__class__ =  String

Std.new = {}
Std.__name__ = true
Std.string = function(s) 
  do return _hx_tostring(s, 0) end;
end
Std.int = function(x) 
  if (not Math.isFinite(x) or Math.isNaN(x)) then 
    do return 0 end;
  else
    do return _hx_bit_clamp(x) end;
  end;
end

StringBuf.new = function() 
  local self = _hx_new(StringBuf.prototype)
  StringBuf.super(self)
  return self
end
StringBuf.super = function(self) 
  self.b = ({});
  self.length = 0;
end
StringBuf.__name__ = true
StringBuf.prototype = _hx_e();
StringBuf.prototype.b= nil;
StringBuf.prototype.length= nil;

StringBuf.prototype.__class__ =  StringBuf

StringTools.new = {}
StringTools.__name__ = true
StringTools.lpad = function(s,c,l) 
  if (#c <= 0) then 
    do return s end;
  end;
  local buf_b = ({});
  local buf_length = 0;
  l = l - #s;
  while (buf_length < l) do 
    local str = Std.string(c);
    _G.table.insert(buf_b, str);
    buf_length = buf_length + #str;
  end;
  _G.table.insert(buf_b, Std.string(s));
  do return _G.table.concat(buf_b) end;
end
_hxClasses["ValueType"] = { __ename__ = true, __constructs__ = _hx_tab_array({[0]="TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"},9)}
ValueType = _hxClasses["ValueType"];
ValueType.TNull = _hx_tab_array({[0]="TNull",0,__enum__ = ValueType},2)

ValueType.TInt = _hx_tab_array({[0]="TInt",1,__enum__ = ValueType},2)

ValueType.TFloat = _hx_tab_array({[0]="TFloat",2,__enum__ = ValueType},2)

ValueType.TBool = _hx_tab_array({[0]="TBool",3,__enum__ = ValueType},2)

ValueType.TObject = _hx_tab_array({[0]="TObject",4,__enum__ = ValueType},2)

ValueType.TFunction = _hx_tab_array({[0]="TFunction",5,__enum__ = ValueType},2)

ValueType.TClass = function(c) local _x = _hx_tab_array({[0]="TClass",6,c,__enum__=ValueType}, 3); return _x; end 
ValueType.TEnum = function(e) local _x = _hx_tab_array({[0]="TEnum",7,e,__enum__=ValueType}, 3); return _x; end 
ValueType.TUnknown = _hx_tab_array({[0]="TUnknown",8,__enum__ = ValueType},2)


Type.new = {}
Type.__name__ = true
Type.getClass = function(o) 
  if (o == nil) then 
    do return nil end;
  end;
  local o = o;
  if (__lua_Boot.__instanceof(o, Array)) then 
    do return Array end;
  else
    if (__lua_Boot.__instanceof(o, String)) then 
      do return String end;
    else
      local cl = o.__class__;
      if (cl ~= nil) then 
        do return cl end;
      else
        do return nil end;
      end;
    end;
  end;
end
Type.getInstanceFields = function(c) 
  local p = c.prototype;
  local a = _hx_tab_array({}, 0);
  while (p ~= nil) do 
    local _g = 0;
    local _g1 = Reflect.fields(p);
    while (_g < _g1.length) do 
      local f = _g1[_g];
      _g = _g + 1;
      if (not Lambda.has(a, f)) then 
        a:push(f);
      end;
    end;
    local mt = _G.getmetatable(p);
    if ((mt ~= nil) and (mt.__index ~= nil)) then 
      p = mt.__index;
    else
      p = nil;
    end;
  end;
  do return a end;
end
Type.typeof = function(v) 
  local _g = _G.type(v);
  if (_g) == "boolean" then 
    do return ValueType.TBool end;
  elseif (_g) == "function" then 
    if ((function() 
      local _hx_1
      if (_G.type(v) ~= "table") then 
      _hx_1 = false; else 
      _hx_1 = v.__name__; end
      return _hx_1
    end )() or (function() 
      local _hx_2
      if (_G.type(v) ~= "table") then 
      _hx_2 = false; else 
      _hx_2 = v.__ename__; end
      return _hx_2
    end )()) then 
      do return ValueType.TObject end;
    end;
    do return ValueType.TFunction end;
  elseif (_g) == "nil" then 
    do return ValueType.TNull end;
  elseif (_g) == "number" then 
    if (_G.math.ceil(v) == (_G.math.fmod(v, 2147483648.0))) then 
      do return ValueType.TInt end;
    end;
    do return ValueType.TFloat end;
  elseif (_g) == "string" then 
    do return ValueType.TClass(String) end;
  elseif (_g) == "table" then 
    local e = v.__enum__;
    if (e ~= nil) then 
      do return ValueType.TEnum(e) end;
    end;
    local c;
    if (__lua_Boot.__instanceof(v, Array)) then 
      c = Array;
    else
      if (__lua_Boot.__instanceof(v, String)) then 
        c = String;
      else
        local cl = v.__class__;
        c = (function() 
          local _hx_3
          if (cl ~= nil) then 
          _hx_3 = cl; else 
          _hx_3 = nil; end
          return _hx_3
        end )();
      end;
    end;
    if (c ~= nil) then 
      do return ValueType.TClass(c) end;
    end;
    do return ValueType.TObject end;else
  do return ValueType.TUnknown end; end;
end

__defold_GoMessages.new = {}
__defold_GoMessages.__name__ = true

__defold_PhysicsMessages.new = {}
__defold_PhysicsMessages.__name__ = true

__defold_SpriteMessages.new = {}
__defold_SpriteMessages.__name__ = true

__defold_SysMessages.new = {}
__defold_SysMessages.__name__ = true

__defold_support_GuiScript.new = function() 
  local self = _hx_new(__defold_support_GuiScript.prototype)
  __defold_support_GuiScript.super(self)
  return self
end
__defold_support_GuiScript.super = function(self) 
end
__defold_support_GuiScript.__name__ = true
__defold_support_GuiScript.prototype = _hx_e();

__defold_support_GuiScript.prototype.__class__ =  __defold_support_GuiScript

__gui_LoginGUI.new = function() 
  local self = _hx_new(__gui_LoginGUI.prototype)
  __gui_LoginGUI.super(self)
  return self
end
__gui_LoginGUI.super = function(self) 
  __defold_support_GuiScript.super(self);
end
__gui_LoginGUI.__name__ = true
__gui_LoginGUI.prototype = _hx_e();
__gui_LoginGUI.prototype.init = function(self,_self) 
  _G.msg.post(".", __defold_GoMessages.acquire_input_focus);
  _self.username = "";
end
__gui_LoginGUI.prototype.on_input = function(self,_self,action_id,action) 
  _self.username = require('dirtylarry/dirtylarry').input(_self, "username", action_id, action, _G.gui.KEYBOARD_TYPE_DEFAULT, "Pick a username");
  require('dirtylarry/dirtylarry').button(_self, "join", action_id, action, function() 
    if (_self.username == "") then 
      do return end;
    end;
    _G.msg.post("/controller", Messages.Login, _hx_o({__fields__={username=true},username=_self.username}));
  end);
  require('dirtylarry/dirtylarry').button(_self, "quit", action_id, action, function() 
    _G.msg.post("@system:", __defold_SysMessages.exit, _hx_o({__fields__={code=true},code=0}));
  end);
  require('dirtylarry/dirtylarry').button(_self, "skinPicker", action_id, action, function() 
    _G.msg.post("/controller", Messages.IncrementSkin);
  end);
  do return true end
end

__gui_LoginGUI.prototype.__class__ =  __gui_LoginGUI
__gui_LoginGUI.__super__ = __defold_support_GuiScript
setmetatable(__gui_LoginGUI.prototype,{__index=__defold_support_GuiScript.prototype})

__gui_GameGUI.new = function() 
  local self = _hx_new(__gui_GameGUI.prototype)
  __gui_GameGUI.super(self)
  return self
end
__gui_GameGUI.super = function(self) 
  __defold_support_GuiScript.super(self);
end
__gui_GameGUI.__name__ = true
__gui_GameGUI.prototype = _hx_e();
__gui_GameGUI.prototype.init = function(self,_self) 
  _G.gui.set_enabled(_G.gui.get_node("w_key"), false);
  _G.gui.set_enabled(_G.gui.get_node("a_key"), false);
  _G.gui.set_enabled(_G.gui.get_node("s_key"), false);
  _G.gui.set_enabled(_G.gui.get_node("d_key"), false);
  _G.gui.set_enabled(_G.gui.get_node("scoreboard"), false);
end
__gui_GameGUI.prototype.on_message = function(self,_self,message_id,message,sender) 
  if (message_id) == Messages.Connected then 
    _G.gui.set_color(_G.gui.get_node("pip"), _G.vmath.vector4(0, 255, 0, .5));
    _G.gui.set_enabled(_G.gui.get_node("w_key"), true);
    _G.gui.set_enabled(_G.gui.get_node("a_key"), true);
    _G.gui.set_enabled(_G.gui.get_node("s_key"), true);
    _G.gui.set_enabled(_G.gui.get_node("d_key"), true);
  elseif (message_id) == Messages.Disconnected then 
    _G.gui.set_color(_G.gui.get_node("pip"), _G.vmath.vector4(255, 0, 0, .5));
  elseif (message_id) == __gui_GameGUI.SetScoreboard then 
    _G.gui.set_enabled(_G.gui.get_node("scoreboard"), true);
    local text = "";
    local obj = __haxe_ds_ObjectMap.new();
    __lua_PairTools.pairsFold(message, function(k,v,m) 
      obj.h[k] = v;
      obj.k[k] = true;
      do return obj end;
    end, obj);
    local this1 = obj;
    local _g_keys = this1:keys();
    while (_g_keys:hasNext()) do 
      local key = _g_keys:next();
      text = Std.string(Std.string(Std.string(Std.string(Std.string("") .. Std.string(key)) .. Std.string(": ")) .. Std.string(this1:get(key))) .. Std.string("\n")) .. Std.string(text);
    end;
    _G.gui.set_text(_G.gui.get_node("scoreboard"), text);
  elseif (message_id) == Messages.SetText then 
    _G.gui.set_text(_G.gui.get_node("text"), message.text); end;
end

__gui_GameGUI.prototype.__class__ =  __gui_GameGUI
__gui_GameGUI.__super__ = __defold_support_GuiScript
setmetatable(__gui_GameGUI.prototype,{__index=__defold_support_GuiScript.prototype})

__defold_support_Init.new = {}
__defold_support_Init.__name__ = true
__defold_support_Init.init = function(exports) 
  local script = __gui_LoginGUI.new();
  exports.gui_LoginGUI_init = function(_self) 
    script:init(_self);
  end;
  exports.gui_LoginGUI_on_input = function(_self,action_id,action) 
    do return script:on_input(_self, action_id, action) end;
  end;
  local script = Game.new();
  exports.Game_init = function(_self) 
    script:init(_self);
  end;
  exports.Game_on_message = function(_self,message_id,message,sender) 
    script:on_message(_self, message_id, message, sender);
  end;
  local script = Controller.new();
  exports.Controller_init = function(_self) 
    script:init(_self);
  end;
  exports.Controller_on_message = function(_self,message_id,message,sender) 
    script:on_message(_self, message_id, message, sender);
  end;
  local script = __gui_GameGUI.new();
  exports.gui_GameGUI_init = function(_self) 
    script:init(_self);
  end;
  exports.gui_GameGUI_on_message = function(_self,message_id,message,sender) 
    script:on_message(_self, message_id, message, sender);
  end;
  local script = Beer.new();
  exports.Beer_on_message = function(_self,message_id,message,sender) 
    script:on_message(_self, message_id, message, sender);
  end;
  local script = Player.new();
  exports.Player_init = function(_self) 
    script:init(_self);
  end;
  exports.Player_update = function(_self,dt) 
    script:update(_self, dt);
  end;
  exports.Player_on_input = function(_self,action_id,action) 
    do return script:on_input(_self, action_id, action) end;
  end;
  exports.Player_on_message = function(_self,message_id,message,sender) 
    script:on_message(_self, message_id, message, sender);
  end;
end

__haxe_IMap.new = {}
__haxe_IMap.__name__ = true
__haxe_IMap.prototype = _hx_e();
__haxe_IMap.prototype.get= nil;
__haxe_IMap.prototype.keys= nil;

__haxe_IMap.prototype.__class__ =  __haxe_IMap

__haxe_Json.new = {}
__haxe_Json.__name__ = true
__haxe_Json.stringify = function(value,replacer,space) 
  do return __haxe_format_JsonPrinter.print(value, replacer, space) end;
end

__haxe_ds_ObjectMap.new = function() 
  local self = _hx_new(__haxe_ds_ObjectMap.prototype)
  __haxe_ds_ObjectMap.super(self)
  return self
end
__haxe_ds_ObjectMap.super = function(self) 
  self.h = ({});
  self.k = ({});
end
__haxe_ds_ObjectMap.__name__ = true
__haxe_ds_ObjectMap.__interfaces__ = {__haxe_IMap}
__haxe_ds_ObjectMap.prototype = _hx_e();
__haxe_ds_ObjectMap.prototype.h= nil;
__haxe_ds_ObjectMap.prototype.k= nil;
__haxe_ds_ObjectMap.prototype.get = function(self,key) 
  do return self.h[key] end
end
__haxe_ds_ObjectMap.prototype.keys = function(self) 
  local _gthis = self;
  local cur = next(self.h, nil);
  do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
    local ret = cur;
    cur = next(_gthis.k, cur);
    do return ret end;
  end,hasNext=function(self) 
    do return cur ~= nil end;
  end}) end
end

__haxe_ds_ObjectMap.prototype.__class__ =  __haxe_ds_ObjectMap

__haxe_ds_StringMap.new = function() 
  local self = _hx_new(__haxe_ds_StringMap.prototype)
  __haxe_ds_StringMap.super(self)
  return self
end
__haxe_ds_StringMap.super = function(self) 
  self.h = ({});
end
__haxe_ds_StringMap.__name__ = true
__haxe_ds_StringMap.__interfaces__ = {__haxe_IMap}
__haxe_ds_StringMap.prototype = _hx_e();
__haxe_ds_StringMap.prototype.h= nil;
__haxe_ds_StringMap.prototype.get = function(self,key) 
  local ret = self.h[key];
  if (ret == __haxe_ds_StringMap.tnull) then 
    ret = nil;
  end;
  do return ret end
end
__haxe_ds_StringMap.prototype.remove = function(self,key) 
  if (self.h[key] == nil) then 
    do return false end;
  else
    self.h[key] = nil;
    do return true end;
  end;
end
__haxe_ds_StringMap.prototype.keys = function(self) 
  local _gthis = self;
  local next = _G.next;
  local cur = next(self.h, nil);
  do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
    local ret = cur;
    cur = next(_gthis.h, cur);
    do return ret end;
  end,hasNext=function(self) 
    do return cur ~= nil end;
  end}) end
end

__haxe_ds_StringMap.prototype.__class__ =  __haxe_ds_StringMap

__haxe_format_JsonPrinter.new = function(replacer,space) 
  local self = _hx_new(__haxe_format_JsonPrinter.prototype)
  __haxe_format_JsonPrinter.super(self,replacer,space)
  return self
end
__haxe_format_JsonPrinter.super = function(self,replacer,space) 
  self.replacer = _hx_funcToField(replacer);
  self.indent = space;
  self.pretty = space ~= nil;
  self.nind = 0;
  self.buf = StringBuf.new();
end
__haxe_format_JsonPrinter.__name__ = true
__haxe_format_JsonPrinter.print = function(o,replacer,space) 
  local printer = __haxe_format_JsonPrinter.new(replacer, space);
  printer:write("", o);
  do return _G.table.concat(printer.buf.b) end;
end
__haxe_format_JsonPrinter.prototype = _hx_e();
__haxe_format_JsonPrinter.prototype.buf= nil;
__haxe_format_JsonPrinter.prototype.replacer= nil;
__haxe_format_JsonPrinter.prototype.indent= nil;
__haxe_format_JsonPrinter.prototype.pretty= nil;
__haxe_format_JsonPrinter.prototype.nind= nil;
__haxe_format_JsonPrinter.prototype.write = function(self,k,v) 
  if (self.replacer ~= nil) then 
    v = self:replacer(k, v);
  end;
  local _g = Type.typeof(v);
  local tmp = _g[1];
  if (tmp) == 0 then 
    local _this = self.buf;
    _G.table.insert(_this.b, "null");
    _this.length = _this.length + #"null";
  elseif (tmp) == 1 then 
    local _this = self.buf;
    local str = Std.string(v);
    _G.table.insert(_this.b, str);
    _this.length = _this.length + #str;
  elseif (tmp) == 2 then 
    local v = (function() 
      local _hx_1
      if (Math.isFinite(v)) then 
      _hx_1 = Std.string(v); else 
      _hx_1 = "null"; end
      return _hx_1
    end )();
    local _this = self.buf;
    local str = Std.string(v);
    _G.table.insert(_this.b, str);
    _this.length = _this.length + #str;
  elseif (tmp) == 3 then 
    local _this = self.buf;
    local str = Std.string(v);
    _G.table.insert(_this.b, str);
    _this.length = _this.length + #str;
  elseif (tmp) == 4 then 
    self:fieldsString(v, Reflect.fields(v));
  elseif (tmp) == 5 then 
    local _this = self.buf;
    _G.table.insert(_this.b, "\"<fun>\"");
    _this.length = _this.length + #"\"<fun>\"";
  elseif (tmp) == 6 then 
    local _g = _g[2];
    if (_g == String) then 
      self:quote(v);
    else
      if (_g == Array) then 
        local v = v;
        local _this = self.buf;
        _G.table.insert(_this.b, _G.string.char(91));
        _this.length = _this.length + 1;
        local len = v.length;
        local last = len - 1;
        local _g = 0;
        while (_g < len) do 
          _g = _g + 1;
          local i = _g - 1;
          if (i > 0) then 
            local _this = self.buf;
            _G.table.insert(_this.b, _G.string.char(44));
            _this.length = _this.length + 1;
          else
            self.nind = self.nind + 1;
          end;
          if (self.pretty) then 
            local _this = self.buf;
            _G.table.insert(_this.b, _G.string.char(10));
            _this.length = _this.length + 1;
          end;
          if (self.pretty) then 
            local v = StringTools.lpad("", self.indent, self.nind * #self.indent);
            local _this = self.buf;
            local str = Std.string(v);
            _G.table.insert(_this.b, str);
            _this.length = _this.length + #str;
          end;
          self:write(i, v[i]);
          if (i == last) then 
            self.nind = self.nind - 1;
            if (self.pretty) then 
              local _this = self.buf;
              _G.table.insert(_this.b, _G.string.char(10));
              _this.length = _this.length + 1;
            end;
            if (self.pretty) then 
              local v = StringTools.lpad("", self.indent, self.nind * #self.indent);
              local _this = self.buf;
              local str = Std.string(v);
              _G.table.insert(_this.b, str);
              _this.length = _this.length + #str;
            end;
          end;
        end;
        local _this = self.buf;
        _G.table.insert(_this.b, _G.string.char(93));
        _this.length = _this.length + 1;
      else
        if (_g == __haxe_ds_StringMap) then 
          local v = v;
          local o = _hx_e();
          local k = v:keys();
          while (k:hasNext()) do 
            local k = k:next();
            local ret = v.h[k];
            if (ret == __haxe_ds_StringMap.tnull) then 
              ret = nil;
            end;
            o[k] = ret;
          end;
          local v = o;
          self:fieldsString(v, Reflect.fields(v));
        else
          if (_g == Date) then 
            self:quote(__lua_Boot.dateStr(v));
          else
            self:classString(v);
          end;
        end;
      end;
    end;
  elseif (tmp) == 7 then 
    local _this = self.buf;
    local str = Std.string(v[1]);
    _G.table.insert(_this.b, str);
    _this.length = _this.length + #str;
  elseif (tmp) == 8 then 
    local _this = self.buf;
    _G.table.insert(_this.b, "\"???\"");
    _this.length = _this.length + #"\"???\""; end;
end
__haxe_format_JsonPrinter.prototype.classString = function(self,v) 
  self:fieldsString(v, Type.getInstanceFields(Type.getClass(v)));
end
__haxe_format_JsonPrinter.prototype.fieldsString = function(self,v,fields) 
  local _this = self.buf;
  _G.table.insert(_this.b, _G.string.char(123));
  _this.length = _this.length + 1;
  local len = fields.length;
  local last = len - 1;
  local first = true;
  local _g = 0;
  local _hx_continue_1 = false;
  while (_g < len) do repeat 
    _g = _g + 1;
    local i = _g - 1;
    local f = fields[i];
    local value = Reflect.field(v, f);
    if (Reflect.isFunction(value)) then 
      break;
    end;
    if (first) then 
      self.nind = self.nind + 1;
      first = false;
    else
      local _this = self.buf;
      _G.table.insert(_this.b, _G.string.char(44));
      _this.length = _this.length + 1;
    end;
    if (self.pretty) then 
      local _this = self.buf;
      _G.table.insert(_this.b, _G.string.char(10));
      _this.length = _this.length + 1;
    end;
    if (self.pretty) then 
      local v = StringTools.lpad("", self.indent, self.nind * #self.indent);
      local _this = self.buf;
      local str = Std.string(v);
      _G.table.insert(_this.b, str);
      _this.length = _this.length + #str;
    end;
    self:quote(f);
    local _this = self.buf;
    _G.table.insert(_this.b, _G.string.char(58));
    _this.length = _this.length + 1;
    if (self.pretty) then 
      local _this = self.buf;
      _G.table.insert(_this.b, _G.string.char(32));
      _this.length = _this.length + 1;
    end;
    self:write(f, value);
    if (i == last) then 
      self.nind = self.nind - 1;
      if (self.pretty) then 
        local _this = self.buf;
        _G.table.insert(_this.b, _G.string.char(10));
        _this.length = _this.length + 1;
      end;
      if (self.pretty) then 
        local v = StringTools.lpad("", self.indent, self.nind * #self.indent);
        local _this = self.buf;
        local str = Std.string(v);
        _G.table.insert(_this.b, str);
        _this.length = _this.length + #str;
      end;
    end;until true
    if _hx_continue_1 then 
    _hx_continue_1 = false;
    break;
    end;
    
  end;
  local _this = self.buf;
  _G.table.insert(_this.b, _G.string.char(125));
  _this.length = _this.length + 1;
end
__haxe_format_JsonPrinter.prototype.quote = function(self,s) 
  local _this = self.buf;
  _G.table.insert(_this.b, _G.string.char(34));
  _this.length = _this.length + 1;
  local i = 0;
  local length = #s;
  while (i < length) do 
    i = i + 1;
    local c = _G.string.byte(s, (i - 1) + 1);
    if (c) == 8 then 
      local _this = self.buf;
      _G.table.insert(_this.b, "\\b");
      _this.length = _this.length + #"\\b";
    elseif (c) == 9 then 
      local _this = self.buf;
      _G.table.insert(_this.b, "\\t");
      _this.length = _this.length + #"\\t";
    elseif (c) == 10 then 
      local _this = self.buf;
      _G.table.insert(_this.b, "\\n");
      _this.length = _this.length + #"\\n";
    elseif (c) == 12 then 
      local _this = self.buf;
      _G.table.insert(_this.b, "\\f");
      _this.length = _this.length + #"\\f";
    elseif (c) == 13 then 
      local _this = self.buf;
      _G.table.insert(_this.b, "\\r");
      _this.length = _this.length + #"\\r";
    elseif (c) == 34 then 
      local _this = self.buf;
      _G.table.insert(_this.b, "\\\"");
      _this.length = _this.length + #"\\\"";
    elseif (c) == 92 then 
      local _this = self.buf;
      _G.table.insert(_this.b, "\\\\");
      _this.length = _this.length + #"\\\\";else
    local _this = self.buf;
    _G.table.insert(_this.b, _G.string.char(c));
    _this.length = _this.length + 1; end;
  end;
  local _this = self.buf;
  _G.table.insert(_this.b, _G.string.char(34));
  _this.length = _this.length + 1;
end

__haxe_format_JsonPrinter.prototype.__class__ =  __haxe_format_JsonPrinter

__haxe_iterators_ArrayIterator.new = function(array) 
  local self = _hx_new(__haxe_iterators_ArrayIterator.prototype)
  __haxe_iterators_ArrayIterator.super(self,array)
  return self
end
__haxe_iterators_ArrayIterator.super = function(self,array) 
  self.current = 0;
  self.array = array;
end
__haxe_iterators_ArrayIterator.__name__ = true
__haxe_iterators_ArrayIterator.prototype = _hx_e();
__haxe_iterators_ArrayIterator.prototype.array= nil;
__haxe_iterators_ArrayIterator.prototype.current= nil;
__haxe_iterators_ArrayIterator.prototype.hasNext = function(self) 
  do return self.current < self.array.length end
end
__haxe_iterators_ArrayIterator.prototype.next = function(self) 
  do return self.array[(function() 
  local _hx_obj = self;
  local _hx_fld = 'current';
  local _ = _hx_obj[_hx_fld];
  _hx_obj[_hx_fld] = _hx_obj[_hx_fld]  + 1;
   return _;
   end)()] end
end

__haxe_iterators_ArrayIterator.prototype.__class__ =  __haxe_iterators_ArrayIterator

__haxe_iterators_ArrayKeyValueIterator.new = function(array) 
  local self = _hx_new(__haxe_iterators_ArrayKeyValueIterator.prototype)
  __haxe_iterators_ArrayKeyValueIterator.super(self,array)
  return self
end
__haxe_iterators_ArrayKeyValueIterator.super = function(self,array) 
  self.array = array;
end
__haxe_iterators_ArrayKeyValueIterator.__name__ = true
__haxe_iterators_ArrayKeyValueIterator.prototype = _hx_e();
__haxe_iterators_ArrayKeyValueIterator.prototype.array= nil;

__haxe_iterators_ArrayKeyValueIterator.prototype.__class__ =  __haxe_iterators_ArrayKeyValueIterator

__lua_Boot.new = {}
__lua_Boot.__name__ = true
__lua_Boot.__instanceof = function(o,cl) 
  if (cl == nil) then 
    do return false end;
  end;
  local cl1 = cl;
  if (cl1) == Array then 
    do return __lua_Boot.isArray(o) end;
  elseif (cl1) == Bool then 
    do return _G.type(o) == "boolean" end;
  elseif (cl1) == Dynamic then 
    do return o ~= nil end;
  elseif (cl1) == Float then 
    do return _G.type(o) == "number" end;
  elseif (cl1) == Int then 
    if (_G.type(o) == "number") then 
      do return _hx_bit_clamp(o) == o end;
    else
      do return false end;
    end;
  elseif (cl1) == String then 
    do return _G.type(o) == "string" end;
  elseif (cl1) == _G.table then 
    do return _G.type(o) == "table" end;
  elseif (cl1) == __lua_Thread then 
    do return _G.type(o) == "thread" end;
  elseif (cl1) == __lua_UserData then 
    do return _G.type(o) == "userdata" end;else
  if (((o ~= nil) and (_G.type(o) == "table")) and (_G.type(cl) == "table")) then 
    local tmp;
    if (__lua_Boot.__instanceof(o, Array)) then 
      tmp = Array;
    else
      if (__lua_Boot.__instanceof(o, String)) then 
        tmp = String;
      else
        local cl = o.__class__;
        tmp = (function() 
          local _hx_1
          if (cl ~= nil) then 
          _hx_1 = cl; else 
          _hx_1 = nil; end
          return _hx_1
        end )();
      end;
    end;
    if (__lua_Boot.extendsOrImplements(tmp, cl)) then 
      do return true end;
    end;
    if ((function() 
      local _hx_2
      if (cl == Class) then 
      _hx_2 = o.__name__ ~= nil; else 
      _hx_2 = false; end
      return _hx_2
    end )()) then 
      do return true end;
    end;
    if ((function() 
      local _hx_3
      if (cl == Enum) then 
      _hx_3 = o.__ename__ ~= nil; else 
      _hx_3 = false; end
      return _hx_3
    end )()) then 
      do return true end;
    end;
    do return o.__enum__ == cl end;
  else
    do return false end;
  end; end;
end
__lua_Boot.isArray = function(o) 
  if (_G.type(o) == "table") then 
    if ((o.__enum__ == nil) and (_G.getmetatable(o) ~= nil)) then 
      do return _G.getmetatable(o).__index == Array.prototype end;
    else
      do return false end;
    end;
  else
    do return false end;
  end;
end
__lua_Boot.dateStr = function(date) 
  local m = date:getMonth() + 1;
  local d = date:getDate();
  local h = date:getHours();
  local mi = date:getMinutes();
  local s = date:getSeconds();
  do return Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(Std.string(date:getFullYear()) .. Std.string("-")) .. Std.string(((function() 
    local _hx_1
    if (m < 10) then 
    _hx_1 = Std.string("0") .. Std.string(m); else 
    _hx_1 = Std.string("") .. Std.string(m); end
    return _hx_1
  end )()))) .. Std.string("-")) .. Std.string(((function() 
    local _hx_2
    if (d < 10) then 
    _hx_2 = Std.string("0") .. Std.string(d); else 
    _hx_2 = Std.string("") .. Std.string(d); end
    return _hx_2
  end )()))) .. Std.string(" ")) .. Std.string(((function() 
    local _hx_3
    if (h < 10) then 
    _hx_3 = Std.string("0") .. Std.string(h); else 
    _hx_3 = Std.string("") .. Std.string(h); end
    return _hx_3
  end )()))) .. Std.string(":")) .. Std.string(((function() 
    local _hx_4
    if (mi < 10) then 
    _hx_4 = Std.string("0") .. Std.string(mi); else 
    _hx_4 = Std.string("") .. Std.string(mi); end
    return _hx_4
  end )()))) .. Std.string(":")) .. Std.string(((function() 
    local _hx_5
    if (s < 10) then 
    _hx_5 = Std.string("0") .. Std.string(s); else 
    _hx_5 = Std.string("") .. Std.string(s); end
    return _hx_5
  end )())) end;
end
__lua_Boot.extendsOrImplements = function(cl1,cl2) 
  while (true) do 
    if ((cl1 == nil) or (cl2 == nil)) then 
      do return false end;
    else
      if (cl1 == cl2) then 
        do return true end;
      else
        if (cl1.__interfaces__ ~= nil) then 
          local intf = cl1.__interfaces__;
          local _g = 1;
          local _g1 = _hx_table.maxn(intf) + 1;
          while (_g < _g1) do 
            _g = _g + 1;
            local i = _g - 1;
            if (__lua_Boot.extendsOrImplements(intf[i], cl2)) then 
              do return true end;
            end;
          end;
        end;
      end;
    end;
    cl1 = cl1.__super__;
  end;
end

__lua_UserData.new = {}
__lua_UserData.__name__ = true

__lua_PairTools.new = {}
__lua_PairTools.__name__ = true
__lua_PairTools.pairsFold = function(table,func,seed) 
  for k,v in _G.pairs(table) do seed = func(k,v,seed) end;
  do return seed end;
end
__lua_PairTools.ipairsIterator = function(table) 
  local _hx_1_p_next, _hx_1_p_table, _hx_1_p_index = _G.ipairs(table);
  local next = _hx_1_p_next;
  local i = _hx_1_p_index;
  do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
    local _hx_2_res_index, _hx_2_res_value = next(table, i);
    i = _hx_2_res_index;
    do return _hx_o({__fields__={index=true,value=true},index=_hx_2_res_index,value=_hx_2_res_value}) end;
  end,hasNext=function(self) 
    do return _G.select(2, next(table, i)) ~= nil end;
  end}) end;
end

__lua_Thread.new = {}
__lua_Thread.__name__ = true
if _hx_bit_raw then
    _hx_bit_clamp = function(v)
    if v <= 2147483647 and v >= -2147483648 then
        if v > 0 then return _G.math.floor(v)
        else return _G.math.ceil(v)
        end
    end
    if v > 2251798999999999 then v = v*2 end;
    if (v ~= v or math.abs(v) == _G.math.huge) then return nil end
    return _hx_bit_raw.band(v, 2147483647 ) - math.abs(_hx_bit_raw.band(v, 2147483648))
    end
else
    _hx_bit_clamp = function(v)
        if v < -2147483648 then
            return -2147483648
        elseif v > 2147483647 then
            return 2147483647
        elseif v > 0 then
            return _G.math.floor(v)
        else
            return _G.math.ceil(v)
        end
    end
end;



_hx_array_mt.__index = Array.prototype

local _hx_static_init = function()
  
  String.__name__ = true;
  Array.__name__ = true;
  _hxdefold_ = _hxdefold_ or {}
  __defold_support_Init.init(_hxdefold_);Beer.SetId = _G.hash("set_id");
  
  Beer.BeerClaimed = _G.hash("beer_claimed");
  
  Beer.Nuke = _G.hash("nuke");
  
  Messages.EnableControl = _G.hash("enable_control");
  
  Messages.ReportPlayerPosition = _G.hash("report_player_position");
  
  Messages.Move = _G.hash("move");
  
  Messages.SetText = _G.hash("set_text");
  
  Messages.IncrementSkin = _G.hash("increment_skin");
  
  Messages.Connected = _G.hash("connected");
  
  Messages.Disconnected = _G.hash("disconnected");
  
  Messages.Login = _G.hash("login");
  
  Messages.OnMatchdata = _G.hash("on_matchdata");
  
  Messages.OnMatchpresence = _G.hash("on_matchpresence");
  
  Messages.JoinMatch = _G.hash("join_match");
  
  Messages.SocketSend = _G.hash("socket_send");
  
  Messages.SendMatchState = _G.hash("send_match_state");
  
  __defold_GoMessages.acquire_input_focus = _G.hash("acquire_input_focus");
  
  __defold_GoMessages.disable = _G.hash("disable");
  
  __defold_PhysicsMessages.collision_response = _G.hash("collision_response");
  
  __defold_SpriteMessages.play_animation = _G.hash("play_animation");
  
  __defold_SysMessages.exit = _G.hash("exit");
  
  __gui_GameGUI.SetScoreboard = _G.hash("set_scoreboard");
  
  __haxe_ds_StringMap.tnull = ({});
  
  
end

_hx_funcToField = function(f)
  if type(f) == 'function' then
    return function(self,...)
      return f(...)
    end
  else
    return f
  end
end

_hx_box_mr = function(x,nt)
    res = _hx_o({__fields__={}})
    for i,v in ipairs(nt) do
      res[v] = x[i]
    end
    return res
end

_hx_table = {}
_hx_table.pack = _G.table.pack or function(...)
    return {...}
end
_hx_table.unpack = _G.table.unpack or _G.unpack
_hx_table.maxn = _G.table.maxn or function(t)
  local maxn=0;
  for i in pairs(t) do
    maxn=type(i)=='number'and i>maxn and i or maxn
  end
  return maxn
end;

_hx_wrap_if_string_field = function(o, fld)
  if _G.type(o) == 'string' then
    if fld == 'length' then
      return _G.string.len(o)
    else
      return String.prototype[fld]
    end
  else
    return o[fld]
  end
end

_hx_static_init();
